#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass scrartcl
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Leksah: An Integrated Development Environment for Haskell
\end_layout

\begin_layout Author
JÃ¼rgen Nicklisch-Franken
\begin_inset Newline newline
\end_inset

Hamish Mackenzie
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Section*
License
\end_layout

\begin_layout Standard
Leksah has been put under the GNU GENERAL PUBLIC LICENSE Version 2.
 The full license text can be found in the file data/gpl.TX in the distribution.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Leksah is an IDE (Integrated Development Environment) for the programming
 language Haskell.
 It is written in Haskell.
 Leksah is intended as a practical tool to support the Haskell development
 process.
 
\end_layout

\begin_layout Standard
Leksah uses GTK+ as GUI Toolkit with the gtk2hs binding.
 It is platform independent and should run on any platform where GTK+, gtk2hs
 and GHC can be installed.
 It is tested on Linux, Windows and Mac.
 It uses the Cabal package management and build system for Package Management.
 It needs the Glasgow Haskell Compiler for full functionality (GHC).
\end_layout

\begin_layout Standard
This document is a reference to the functionality of Leksah, it is not intended
 to be a tutorial.
 Since Leksah is in the state of development the information may be incomplete
 or even wrong.
\end_layout

\begin_layout Subsection
Further Information
\end_layout

\begin_layout Standard
The home page for Leksah is 
\begin_inset CommandInset href
LatexCommand href
name "leksah.org"
target "http://leksah.org"

\end_inset

.
 The source code for Leksah is hosted under 
\begin_inset CommandInset href
LatexCommand href
name "code.haskell.org/leksah"
target "http://code.haskell.org/leksah"

\end_inset

.
 The Leksah user Wiki is 
\begin_inset CommandInset href
LatexCommand href
name "haskell.org/haskellwiki/Leksah"
target "http://haskell.org/haskellwiki/Leksah"

\end_inset

.
 The Leksah mailing list can be accessed at 
\begin_inset CommandInset href
LatexCommand href
name "projects.haskell.org/cgi-bin/mailman/listinfo/leksah"
target "http://projects.haskell.org/cgi-bin/mailman/listinfo/leksah"

\end_inset

.
 The current version of this manual can be found at 
\begin_inset CommandInset href
LatexCommand href
name "leksah.org/leksah_manual.pdf"
target "http://leksah.org/leksah_manual.pdf"

\end_inset

.
 An issue tracker is at 
\begin_inset CommandInset href
LatexCommand href
name "code.google.com/p/leksah/issues/list"
target "http://code.google.com/p/leksah/issues/list"

\end_inset

.
 You can contact the developers at 
\begin_inset CommandInset href
LatexCommand href
name "info (at) leksah.org"
target "info@leksah.org"
type "mailto:"

\end_inset

.
 
\end_layout

\begin_layout Standard
For the Programming language Haskell go to 
\begin_inset CommandInset href
LatexCommand href
name "www.haskell.org"
target "http://www.haskell.org"

\end_inset

.
 For information about gtk2hs 
\begin_inset CommandInset href
LatexCommand href
name "www.haskell.org/gtk2hs/"
target "http://www.haskell.org/gtk2hs/"

\end_inset

.
 For information about GTK+ go to 
\begin_inset CommandInset href
LatexCommand href
name "www.gtk.org"
target "http://www.gtk.org"

\end_inset

.
 
\end_layout

\begin_layout Subsection
Release Notes
\end_layout

\begin_layout Subsubsection
Version 0.6 Beta Release Juli 2009
\end_layout

\begin_layout Standard
The 0.6 version introduces an interpreter/debugger mode.
 This mode can be switched on and off from the toolbar.
 In interpreter/debugger mode expressions can be evaluated and the type
 of expressions can be dynamically shown.
 The GHCi debugger is integrated, so that breakpoints can be set, it is
 possible to step through the code, observe the values of variables and
 trace the execution history.
 The other features of Leksah like building in the background and reporting
 errors on the fly work in debugger mode as in compiler mode.
\end_layout

\begin_layout Standard
Another new feature is integration of grep and text search with regular
 expression.
 This can be accessed from the findbar.
\end_layout

\begin_layout Standard
The GUI framework has been enhanced, so that layouts can be nested in so
 called group panes.
 This feature is used for the debugger pane.
 Furthermore notebooks can be detached, so that Leksah can be used on multiple
 screens.
\end_layout

\begin_layout Standard
A lot of little enhancements has been made and numerous bugs has been fixed.
\end_layout

\begin_layout Standard
Known bugs and problems:
\end_layout

\begin_layout Itemize
The package editor works only for cabal files without configurations.
\end_layout

\begin_layout Itemize
MS Windows: The check for external modifications of source files does not
 work.
\end_layout

\begin_layout Itemize
MS Windows: Interruption of a background build does not work.
\end_layout

\begin_layout Itemize
GUI History still not working.
\end_layout

\begin_layout Itemize
Traces pane of the Debugger does not work appropriately.
\end_layout

\begin_layout Subsubsection
Version 0.4 Beta Release February/March 2009
\end_layout

\begin_layout Standard
The 0.4 Release is the first beta release of Leksah.
 It should be usable for practical work for the ones that wants to engage
 with it.
\end_layout

\begin_layout Standard
It depends on GHC 
\begin_inset Formula $\geq$
\end_inset

6.10.1 and gtk2hs 
\begin_inset Formula $\geq$
\end_inset

 0.10.0.
\end_layout

\begin_layout Standard
The class pane and the history feature are not quite ready, so we propose
 not to use it yet.
 
\end_layout

\begin_layout Subsubsection
Version 0.1 Alpha Release February 2008 
\end_layout

\begin_layout Standard
This is a pre-release of Leksah.
 The editor for Cabal Files is not ready, so we propose not to use it yet.
 w
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Installing Leksah
\end_layout

\begin_layout Standard

\series bold
It is a good idea to install sources for your Haskell libraries when using
 Leksah
\series default
.
 Leksah can then give you much better information from Metadata.
 Installing with 
\emph on
cabal install
\emph default
 will do that, and you can download the sources for GHC even after you installed
 it from a binary package.
 However compiling from sources is necessary for special packages, which
 perform some special magic, like generating header files or such.
 With sources installed Leksah will show you source comments for functions
 while auto-completing and will be navigate you to the sources of functions.
 
\end_layout

\begin_layout Standard
If you have any trouble installing and this manual will not help, please
 check the Wiki, the mailing list or contact the developers to find a solution.
 If it is a Leksah problem, then it is important to us and needs to be fixed.
\end_layout

\begin_layout Standard

\emph on
We work on installers for Windows and Mac and packages for Debian/Ubuntu
 are in preparation.
 Further help needed! 
\end_layout

\begin_layout Subsection
Generic Installation Instructions
\end_layout

\begin_layout Subsubsection
Install GHC (Glasgow Haskell Compiler)
\end_layout

\begin_layout Standard
At the time of writing Leksah supports GHC in the versions (6.10.*).
 For information about installing GHC go to 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://haskell.org/ghc
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Install Cabal
\end_layout

\begin_layout Standard
At the time of writing Leksah requires at least version 1.6.0.1.
 For information about installing Gtk2Hs got to 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://haskell.org/cabal
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
On operating systems with package managers you may find that a Cabal package
 is available.
 Once again if you want good Metadata for the Cabal functions, try to build
 binaries on your machine.
\end_layout

\begin_layout Subsubsection
Install Gtk2Hs
\end_layout

\begin_layout Standard
At the time of writing Leksah supports only the most current version (0.10.*).
 For information about installing Gtk2Hs got to 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://haskell.org/gtk2hs
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
If you are planning on installing a newer version, then you will need to
 make sure it is compatible with the version of GHC you have installed first.
\end_layout

\begin_layout Standard
On operating systems with a package manager you may wish to use a source
 OS package and build a binary OS package to install.
 You should be able to prevent the working directory from being cleaned,
 so it can be used for Leksah's Metadata.
 Doing this means that other OS packages depending on Gtk2Hs can still easily
 be installed.
\end_layout

\begin_layout Standard
If you compile Gtk2Hs manually, check the output of ./configure.
 At the end it will list the Haskell packages that are going to be build.
 Leksah needs GTK, glib and gtksourceview2.
\end_layout

\begin_layout Standard
Gtk2Hs conditionally compiles some code dependent of the version of the
 underlying GTK libraries.
 This can cause strange compiler errors when compiling Leksah later.
\end_layout

\begin_layout Subsubsection
Install Leksah
\end_layout

\begin_layout Standard

\noun on
Either
\noun default
: Install cabal-install from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://haskell.org/cabal
\end_layout

\end_inset

.
 Then run 
\begin_inset Quotes eld
\end_inset

cabal install leksah --user
\begin_inset Quotes erd
\end_inset

.
 This is the preferred way.
\end_layout

\begin_layout Standard

\noun on
Or
\noun default
: Download, configure, build and install the prerequisite packages: binary
 â¥0.4.1, bytestring â¥0.9.0.1, utf8-string â¥0.3.1.1, regex-posix â¥0.39.1 which is available
 from HackageDB 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

hackage.haskell.org
\end_layout

\end_inset

 with typical Cabal procedure.
 (Go to the root folder of the package.
 Then do 
\emph on
runhaskell configure, runhaskell build, sudo runhaskell install
\emph default
.
 The other packages needed should have been installed with GHC anyway.
 (I'm nut sure if GHC-extralibs is needed).
 Then get the Leksah package via Hackage and do the same.
\end_layout

\begin_layout Subsubsection
Where Things Are Installed
\end_layout

\begin_layout Standard
Leksah installs a an executable in a folder that should be in the search
 path, and a couple of data files in a data folder.
 These places are chosen by the Cabal package management system and depend
 on the target platform and the way you install.
 On Linux the data folder may be
\emph on
 /usr/share/leksah-0.4/data.
 
\emph default
For storing preferences, sessions and collected meta-data Leksah constructs
 a .leksah directory in your home folder.
 If you want to change or add configuration files for keymaps, source candy,
 etc, you can put them in this place.
\end_layout

\begin_layout Subsubsection
Post installation steps
\end_layout

\begin_layout Standard
If you 
\emph on
upgrade
\emph default
 to version 0.6 you should clean the Current.session and maybe the Default.prefs
 file from your .leksah configuration folder.
 This means that you loose your personal settings.
 As well you should clean the IDE.session files from the project folders
 you are working on (or at least avoid to open them when prompted).
\end_layout

\begin_layout Standard
If you use a customized keymap in your .leksah folder, you need to append
 new keybindings.
 
\end_layout

\begin_layout Standard

\series bold
\color red
New
\series default
\color inherit
 With version 0.6 for a pleasant visual appearance, you have to copy or append
 the .gtkrc-2.0 file from the Leksah data folder or from the data folder in
 Leksah sources to your home folder.
 
\end_layout

\begin_layout Subsection
OS X (using MacPorts)
\end_layout

\begin_layout Standard
We have just finished building an Intel Mac dmg and we would like to know
 if it works ok.
 If you have a chance, could you install it and let us know if it runs ok.
\end_layout

\begin_layout Standard
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://leksah.org/Leksah.dmg
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Before starting with the installer, this is our recommended procedure for
 installing on OS X at present.
\end_layout

\begin_layout Subsubsection
Install MacPorts
\end_layout

\begin_layout Standard
Download and install MacPorts by following the instructions on 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.macports.org/install.php
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
Set up ~/.profile
\end_layout

\begin_layout Standard
Add the following to your ~/.profile then open a new terminal window and
 type 
\begin_inset Quotes eld
\end_inset

set
\begin_inset Quotes erd
\end_inset

 to make sure it has worked
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout

\family typewriter
export PATH=~/.cabal/bin:/opt/local/bin:$PATH
\end_layout

\begin_layout Plain Layout

\family typewriter
export XDG_DATA_DIRS=/opt/local/share
\end_layout

\end_inset


\end_layout

\begin_layout Standard
XDG_DATA_DIRS is only needed at run time, so if you have already built without
 it you can just add it now and it should help GTK find the files it needs.
\end_layout

\begin_layout Subsubsection
Update MacPorts
\end_layout

\begin_layout Standard
Run 
\begin_inset Quotes eld
\end_inset

sudo port selfupdate
\begin_inset Quotes erd
\end_inset

.
 To make sure you have the latest Portfiles.
\end_layout

\begin_layout Subsubsection
Set Variants To Use Quartz (Optional)
\end_layout

\begin_layout Standard
If you want to use the Quartz version of GTK+ (instead of the X11 version)
 then add the following to /opt/local/etc/macports/variants.conf.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout

\family typewriter
+no_x11
\end_layout

\begin_layout Plain Layout

\family typewriter
-x11
\end_layout

\begin_layout Plain Layout

\family typewriter
+quartz
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
\color red
Warning 1
\series default
\color inherit
 doing this will disable OpenGL support in GTK+ or Gtk2Hs (gtkglext).
\end_layout

\begin_layout Standard

\series bold
\color red
Warning 2
\series default
\color inherit
 for some reason GTK applications when they start will not be in the foreground,
 instead they will be hidden all your other running applications.
\end_layout

\begin_layout Standard

\series bold
\color red
Warning 3
\series default
\color inherit
 if you already have GTK MacPorts packages installed then you need to uninstall
 and reinstall the packages that support these variants
\end_layout

\begin_layout Subsubsection
Install
\end_layout

\begin_layout Standard
Run the following to install leksah.
 The -k is important it keeps the source and .hi files for use in the Leksah
 metadata.
 Do not include gtkglext in the first line if you are building the Quartz
 version (as it is only supported in X11 builds).
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout

\family typewriter
sudo port install gtk2 cairo librsvg libglade2 gtksourceview2 gtk-chtheme
 gtk2-clearlooks gtkglext
\end_layout

\begin_layout Plain Layout

\family typewriter
pkg-config --modversion gtksourceview-2.0
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
pkg-config
\family default
 should output version 
\family typewriter
2.4.2
\family default
 or greater.
 If it does not check your 
\family typewriter
PATH
\family default
 has 
\family typewriter
/op/local/bin
\family default
 before any other folders with 
\family typewriter
pkg-config
\family default
.
 Once this is sorted you can move on to running...
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout

\family typewriter
sudo port -k install ghc gtk2hs hs-cabal
\end_layout

\begin_layout Plain Layout

\family typewriter
cabal install leksah
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you have errors at this point it is a good idea to check 
\begin_inset Quotes eld
\end_inset


\family typewriter
ghc-pkg list
\family default

\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsubsection
Make It Look Nice
\end_layout

\begin_layout Standard
Run gtk-chtheme and choose one of the Clearlooks themes.
\end_layout

\begin_layout Subsubsection
Point Leksah At The Source
\end_layout

\begin_layout Standard
Run 
\begin_inset Quotes eld
\end_inset

leksah
\begin_inset Quotes erd
\end_inset

 and when it asks for 
\begin_inset Quotes eld
\end_inset

paths under which haskell source packages may be found
\begin_inset Quotes erd
\end_inset

 add the following to the list.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout

\family typewriter
\size scriptsize
/opt/local/var/macports/build/_opt_local_var_macports_sources_rsync.macports.org_r
elease_ports_lang_ghc/work/ghc-6.10.1
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
/opt/local/var/macports/build/_opt_local_var_macports_sources_rsync.macports.org_r
elease_ports_devel_gtk2hs/work/gtk2hs-0.10.0
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ubuntu 
\end_layout

\begin_layout Subsubsection
Install Prerequisites
\end_layout

\begin_layout Standard
Open up the package manager and make shure the following packages are installed:
\end_layout

\begin_layout Itemize
glib-devel
\end_layout

\begin_layout Itemize
gtksourceview2-devel
\end_layout

\begin_layout Itemize
make
\end_layout

\begin_layout Itemize
gcc
\end_layout

\begin_layout Itemize
g++
\end_layout

\begin_layout Itemize
libgmp3-dev
\end_layout

\begin_layout Subsubsection
Install GHC (Once 6.10.1 is in the universe repository)
\end_layout

\begin_layout Standard

\emph on
At the time of writing only 6.8.2 was available in the Ubuntu universe repository.
\end_layout

\begin_layout Standard
If you have ghc 6.8 installed then we recomend you uninstall it to avoid
 conflicts.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout

\family typewriter
sudo apt-get remove ghc6
\end_layout

\begin_layout Plain Layout

\family typewriter
sudo apt-get build-dep ghc6
\end_layout

\begin_layout Plain Layout

\family typewriter
wget http://www.haskell.org/ghc/dist/6.10.1/ghc-6.10.*-src.tar.bz2
\end_layout

\begin_layout Plain Layout

\family typewriter
wget http://www.haskell.org/ghc/dist/6.10.1/ghc-6.10.*-src-extralibs.tar.bz2
\end_layout

\begin_layout Plain Layout

\family typewriter
tar xjf ghc-6.10.1-src.tar.bz2
\end_layout

\begin_layout Plain Layout

\family typewriter
tar xjf ghc-6.10.1-src-extralibs.tar.bz2
\end_layout

\begin_layout Plain Layout

\family typewriter
cd ghc-6.10.1
\end_layout

\begin_layout Plain Layout

\family typewriter
./configure --prefix=/home/username/ghc
\end_layout

\begin_layout Plain Layout

\family typewriter
make
\end_layout

\begin_layout Plain Layout

\family typewriter
make install
\end_layout

\begin_layout Plain Layout

\family typewriter
export $PATH=$PATH:/home/username/ghc/bin
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Install Cabal
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout

\family typewriter
\size footnotesize
wget http://www.haskell.org/cabal/release/cabal-install-0.6.2/cabal-install-0.6.2.tar.gz
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
tar -xvjpf cabal-install-0.6.2.tar.gz
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
cd cabal-install-0.6.2
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
./bootstrap
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Install Gtk2Hs
\end_layout

\begin_layout Standard
Check the output of ./configure, at the end it should list the haskell packages
 it is going to build.
 Leksah needs gtksourcevie, gtk and glib (if you have installed glib-devel
 and gtksourceview2-devel then these should be enabled).
 If there are any that are not going to be installed that you would like,
 then you most likely need to install the corresponding -devel ubuntu package.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
wget http://downloads.sourceforge.net/gtk2hs/gtk2hs-0.10.0.tar.gz
\end_layout

\begin_layout Plain Layout

\family typewriter
tar -xvjpf gtk2hs-0.10.0.tar.gz
\end_layout

\begin_layout Plain Layout

\family typewriter
cd gtk2hs-0.10.0.tar.gz
\end_layout

\begin_layout Plain Layout

\family typewriter
./configure
\end_layout

\begin_layout Plain Layout

\family typewriter
make
\end_layout

\begin_layout Plain Layout

\family typewriter
sudo make install
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Add Cabal To Your PATH
\end_layout

\begin_layout Standard
Cabal can install packages globally or local to the current user (use --user
 and --global to select which).
 We recommend you add the following to your ~/.bash_profile
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout

\family typewriter
PATH=$PATH:/home/sean/.cabal/bin
\end_layout

\begin_layout Plain Layout

\family typewriter
export PATH
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you change your path you will have to restart X to make it apply automaticall
y or you can type
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout

\family typewriter
source ~/.bash_profile
\end_layout

\end_inset


\end_layout

\begin_layout Standard
each time you open a new terminal until you get a chance to restart X.
\end_layout

\begin_layout Subsubsection
Install Leksah
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout

\family typewriter
cabal update
\end_layout

\begin_layout Plain Layout

\family typewriter
cabal install leksah
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
MS Windows
\end_layout

\begin_layout Standard
In the future I hope we can provide a Windows installer.
 For now the situation is difficult, because the 
\color red
latest gtk2hs Windows installer that works for Leksah is 0.10.0, which only
 works with GHC 6.10.2
\color inherit
.
 Build 0.10.1 of gtk2hs has an issue with the the GTKSourceView2 component.
 A windows installer for GHC 6.10.4 is missing.
 Please write to the gtk2hs users mailing list if you want this situation
 to improve.
\end_layout

\begin_layout Standard
This is what you can do to get leksah running on Vista:
\end_layout

\begin_layout Enumerate
Install Cygwin with the online installer from http://www.cygwin.com/ Select
 packages wget, curl and gcc-core in adition to the standard selection.
 I used the 1.7.0 version of Cygwin setup, but it is still beta.
\end_layout

\begin_layout Enumerate
Install your GHC from http://www.haskell.org/ghc.
 
\end_layout

\begin_layout Enumerate
Install gtk2hs from http://www.haskell.org/gtk2hs/ or Sourceforge.net.
 
\end_layout

\begin_layout Enumerate
Download the GHC sources from http://www.haskell.org/ghc.
 Open a Cygwin shell, make a directory Haskell, copy the source tarballs
 here and unpack them.
 Take care that the directory name has no blanks in its path!
\end_layout

\begin_layout Enumerate
cabal install leksah.
 (Guess it is already installed with 6.10.2?)
\end_layout

\begin_layout Enumerate
You may wish to install a full Unicode monospace font if you want to use
 the source candy feature of leksah.
 e.g.
 Everson Mono or Deja Vu Sans Mono or perhaps the GNU FreeFonts which are
 aesthetically pleasing.
\end_layout

\begin_layout Enumerate
Start leksah and give your Haskell directory as source root.
 Select the right font from Help/Prefs.
\end_layout

\begin_layout Enumerate
Have fun with leksah, but remember it is a beta version!
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
First start of Leksah
\end_layout

\begin_layout Enumerate
When you start Leksah for the first time, the first start dialog appears
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:FirstStart-dialog"

\end_inset

).
 You have to specify folders, under which Haskell source code for installed
 packages can be found.
 This can be any folder above the source directories.
 So figure out what this will be on your system.
 You have to click the Add Button after selecting the folder.
 
\end_layout

\begin_layout Enumerate
If you use cabal install add the cabal install package directory to the
 
\begin_inset Quotes eld
\end_inset

extract packages from cabal-install
\begin_inset Quotes erd
\end_inset

 section.
 This means that leksah decompresses and untars the sources, so they can
 be scanned by Leksah.
 This is kind of a hack currently.
\end_layout

\begin_layout Standard
\begin_inset Box Framed
position "t"
hor_pos "c"
has_inner_box 0
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
Later you can change this settings in the preferences pane in Leksah and
 you can rebuild the metadata at any time.
 Details about metadata collection can be found here: 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Metadata-collection"

\end_inset

.
\end_layout

\end_inset

 
\begin_inset Box Framed
position "t"
hor_pos "c"
has_inner_box 0
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
If you want to start from scratch again delete or rename the .leksah folder
 in your home folder.
 Then you will see the first start dialog again.
\end_layout

\end_inset

 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/FirstStartDialog.png
	lyxscale 50
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:FirstStart-dialog"

\end_inset

FirstStart dialog
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Now Leksah collects information about all installed packages on your system.
 So it may take some time, but at further starts only information for new
 packages will be installed.
 Their will eventually be a bunch of errors on your command line, but don't
 worry, it only means that Leksah has not succeeded to extract the source
 locations and comments for certain modules or packages.
 
\end_layout

\begin_layout Enumerate
After starting up, Leksah will open its Main window in a standard configuration
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:After-start"

\end_inset

).
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/AfterStart0.6.png
	lyxscale 22
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:After-start"

\end_inset

After start
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
One way to start up, and probably the best way if you already have experience
 with Haskell, will be to open an existing project.
 So select Package/OpenPackage from the menu and open a Cabal file of some
 project.
 A typical Leksah window may then look like 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Leksah-with-open"

\end_inset

.
\begin_inset Newline newline
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/AtWork0.6.png
	lyxscale 22
	display false
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Leksah-with-open"

\end_inset

Leksah with open project
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Alternatively you can start with a 
\end_layout

\begin_layout Subsection
Hello World example
\end_layout

\begin_layout Standard
Create a Package with one Executable (name of both can be the same)
\end_layout

\begin_layout Itemize
Package -> New and use the "Create Folder" button to make a new folder for
 the package.
 Fill in your package identifier including a version number.
\end_layout

\begin_layout Itemize
Click on the Dependencies tab (in the package editor).
 Type in "base" and click "Add" (this is like the references in visual studio
 projects) 
\end_layout

\begin_layout Itemize
Click on the Executables tab (in the package editor).
 Fill in an executable name and put âMain.hsâ in the âfile with main functionâ
 and click "Add".
 
\end_layout

\begin_layout Itemize
Click on Build â1 Build Infoâ.
 Add âsrcâ to the list.
 This way your source files should all end up in the src sub directory.
 
\end_layout

\begin_layout Itemize
Click Save and Close
\end_layout

\begin_layout Standard
Add the Main module
\end_layout

\begin_layout Itemize
Click on the Modules tab (this is like the class browser in visual studio).
 Right click and select Add Module.
 Put âMainâ in the New Module box.
 
\end_layout

\begin_layout Itemize
Add 
\emph on
main = putStrLn "Hello World" 
\end_layout

\begin_layout Standard
Run it
\end_layout

\begin_layout Itemize
Package -> Configure 
\end_layout

\begin_layout Itemize
Package -> Build 
\end_layout

\begin_layout Itemize
Package -> Run 
\end_layout

\begin_layout Itemize
Output will be in the Log window
\end_layout

\begin_layout Standard
Debug it
\end_layout

\begin_layout Itemize
\begin_inset Graphics
	filename ../data/ide_debug.png
	width 1cm

\end_inset

Switch debugger Mode on.
\end_layout

\begin_layout Itemize
Debug -> Show Debugger 
\end_layout

\begin_layout Itemize
Select the word âmainâ in your code 
\end_layout

\begin_layout Itemize
Right click and choose âEvalâ 
\end_layout

\begin_layout Standard
It is probably counter productive for new users to use Candy mode (converts
 some common ascii based operators to Unicode alternatives) because all
 the tutorials use ascii.
 Switch it off when you get irritated.
 
\end_layout

\begin_layout Standard
For a further info refer to: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://en.wikibooks.org/wiki/Haskell
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
The Editor
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 0in
width "30col%"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/FileMenu0.6.png
	lyxscale 50
	scale 37

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:File-menu"

\end_inset

File menu
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The central functionality needed for development is to edit Haskell source
 files.
 Leksah uses the GtkSourceView2 widget for this.
 It provides editing, undo/redo, syntax highlighting and other features.
 In the file menu (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:File-menu"

\end_inset

) you have the usual functionality to open, save, close and revert files.
 You can as well close all files, and all files which are not stored in
 or below the top folder of the current project (this is the folder where
 the .cabal file resides).
 Leksah does not store backup files.
 Leksah detects if a file has changed which is currently edited and queries
 the user if a reload is desired.
 When you open a file which is already open, leksah queries if you want
 to make the currently open file active, instead of opening it a second
 time (Leksah does not support multiple views on a file, but if you open
 a file a second time, it's like editing the file two times, which makes
 little sense).
\end_layout

\begin_layout Standard
When a file has changed compared to the stored version, the file name is
 shown in red in the notebook tab.
 If you want to change to a different buffer you can open a list of all
 open buffers by pressing the right mouse button, while the mouse is over
 a notebook tab.
 You can then select an entry in this list to select this file.
 (See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Using-the-Flipper"

\end_inset

 for a better way to switch between source files.
\end_layout

\begin_layout Standard
On the right side in the status bar you can see the line and column, in
 which the cursor currently is; and if overwrite mode is switched on.
 In the second compartment from the left you can see the currently active
 pane, which is helpful if you want to be sure that you have selected the
 right pane for some operation.
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 0in
width "30col%"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/EditMenu0.6.png
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Edit-menu"

\end_inset

Edit menu
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the edit menu (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Edit-menu"

\end_inset

) you find the usual operations: undo, redo, cut, copy, paste and select
 all.
 In addition you can comment and un-comment selected lines in a per line
 style (--).
 
\end_layout

\begin_layout Standard
Furthermore you can align some special characters (=,<-,->,::,|) in selected
 lines.
 The characters are never moved to the left, but the operation is very simple
 and takes the rightmost position of the special character in all lines,
 and inserts spaces before the first occurrence of this special characters
 in the other lines for alignment.
\end_layout

\begin_layout Subsection
Find and Replace
\end_layout

\begin_layout Standard
Leksah supports searching in text files.
 When you select Edit/Find from the menu the find bar will open (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Find-bar"

\end_inset

) and you can type in a text string.
 Alternatively you can hit Ctrl-F or select a text and hit Ctrl-F (This
 is a standard keystrokes.
 Keystrokes can be configures, see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Shortcuts"

\end_inset

).
 Hitting the up and down arrow will bring you to the next/previous occurrence
 of the search string.
 Hitting Enter has a similar effect as the down arrow.
 Hitting Escape will closes the find bar and sets the cursor to the current
 find position.
 You have options for case sensitive search(c.S.), for searching only whole
 worlds (Words) and for wrapping around (Wrap), which means that the search
 will start at the beginning/end of the file, when the end/beginning is
 reached.
 If their is no occurrence of the search string the entry turns red.
 
\end_layout

\begin_layout Standard
You can search for regular expressions by switching on the Regex option.
 Leksah supports regular expressions in the Posix style (by using the regex-posi
x package).
 When the syntax of regular expressions is not legal, the background of
 the find pane turns orange.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/FindBar0.6.png
	lyxscale 40
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Find-bar"

\end_inset

Find bar
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To replace a text enter the new text in the replace entry and select replace
 or replace all.
\end_layout

\begin_layout Standard
The find bar supports as well to jump to a certain line number in the current
 text buffer.
\end_layout

\begin_layout Subsubsection
Grep
\end_layout

\begin_layout Standard
For this feature the grep program must be on your path.
 You can then enter a search string in the find bar and hit the Grep button.
 This will search for all occurrences for the string in the folder and subfolder
 of the current package.
 Greps supports the search for regular expressions.
 A pane will open (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Grep-pane"

\end_inset

), and in every displayed line the expression was found.
 By clicking on the line, an editor is opened or brought to front and the
 focus is set to the selected line.
 You can navigate between lines with the up and down keys.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/Grep0.6.png
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Grep-pane"

\end_inset

Grep pane
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Source Candy
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/SourceCandy.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Source candy example
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When using Source Candy, Leksah reads and writes pure ASCII Code files,
 but can nevertheless show you nice symbols like 
\begin_inset Formula $\lambda.$
\end_inset

This is done by replacing certain character combinations by a Unicode character
 when loading a file or when typing, and replace it back when the file is
 saved.
\end_layout

\begin_layout Standard
The use of the candy feature can be switched on and off in the menu and
 the preferences dialog.
\end_layout

\begin_layout Standard
This feature can be configured by editing a .candy file in the .leksah folder
 or in the data folder.
 The name of the candy file to be used can be specified in the Preferences
 dialog.
\end_layout

\begin_layout Standard
Lines in the *.candy file looks like:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout

\family typewriter
"
\backslash
"         0x03bb                --GREEK SMALL LETTER LAMBDA
\end_layout

\begin_layout Plain Layout

\family typewriter
"->"        0x2192   Trimming     --RIGHTWARDS ARROW
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first entry in a line are the characters to replace.
 The second entry is the hexadecimal representation of the Unicode character
 to replace with.
 The third entry is an optional argument, which specifies, that the replacement
 should add and remove blanks to keep the number of characters.
 This is important because of the layout feature of Haskell.
 The last entry in the line is an optional comment, which is by convention
 the name of the Unicode character.
\end_layout

\begin_layout Standard
Using the source candy feature can give you problems with layout, because
 the alignment of characters with and without source candy may differ!
\end_layout

\begin_layout Standard
\begin_inset Box Framed
position "t"
hor_pos "c"
has_inner_box 0
inner_pos "t"
use_parbox 1
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
Leksah reads and writes files encoded in UTF-8.
 So you can edit Unicode Haskell source files.
 When you want to do this, switch of source candy, because otherwise Unicode
 characters may be converted to ASCII when saving the file.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Completion"

\end_inset

Completion
\end_layout

\begin_layout Standard
Leksah has the ability to auto complete identifiers in text you type.
 Additionally the Package, Module and Type of the id gets displayed if selected.
 
\end_layout

\begin_layout Standard
This completion mode can either be always on, or only be activated on pressing
 Ctrl+Space (or a user defined keystroke).
 You can choose between these two possibilities in the Preferences.
\end_layout

\begin_layout Standard
Leksah currently uses all names provided by the package scope for completion.
 So it has no context sensitiveness, and doesn't provide locally defined
 names.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/Completion0.6.png
	scale 27

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Completion
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Using-the-Flipper"

\end_inset

Using the Flipper to Switch Editors
\end_layout

\begin_layout Standard
You can change the active pane using a keyboard shortcut to bring up the
 flipper.
 It lists the most recently used panes first so they are easier to get to.
 The default shortcuts for the flipper are Ctrl+Tab and Ctrl+Shift+Tab or
 Ctrl+Page Down and Ctrl+Page Up.
 
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Editor-Preferences"

\end_inset

Editor Preferences
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/EditPrefs.png
	display false
	scale 33

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Editor Preferences
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When selecting Configuration / Edit Prefs the preferences pane opens, which
 has a selection called Editor (Figure 8), were you can edit preferences
 for the editor.
 Some of the options you find here refer to visual elements, like the display
 of line numbers, the font used, the display of a right margin and the use
 of a style file for colors and syntax highlighting.
 
\end_layout

\begin_layout Standard
You can set here the Tab size you want.
 Leksah always stores tabs as spaces to ease the use of layout.
 (As you may know, otherwise only a tab size of 8 can be digested by Haskell
 compilers).
 
\end_layout

\begin_layout Standard
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Leksah has an option for storing the files with standard UNIX line ends
 even on Windows, and not using the infamous Cr/Lf combination.
 This is e.g.
 useful if Windows and other users commit to the same repository.
 This may not work anymore since switching to unicode sources?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Leksah offers as well to remove trailing blanks in lines, which you may
 choose as default, because blanks at the end of lines make no sense in
 source code.
\end_layout

\begin_layout Subsection
Further info
\end_layout

\begin_layout Standard
The work with the editor is influenced by other features
\end_layout

\begin_layout Itemize
For background building, which may save your files automatically after every
 change refer to 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Background-Build"

\end_inset

.
\end_layout

\begin_layout Itemize
For information about editor preferences go to 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Editor-Preferences"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Packages
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 0in
width "30col%"
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename screenshots/PackageMenu0.6.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Package-Menu"

\end_inset

Package Menu
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Leksah does not only support editing Haskell source files, but as well building
 the application or program you are developing.
 The concept of a package is used to handle a unit of work for the development
 of some library or executable.
 One instance of Leksah can only open one package at a time.
 (It is a wish of many users to make this more flexible in the way of e.g.
 Eclipse Workspaces).
 Leksah can store configurations for packages separately (and does this
 by default), so that you can switch between packages and get exactly back
 to where you stopped when opening a different package.
\end_layout

\begin_layout Standard
Leksah uses Cabal for package management, and opening a package is done
 by opening a .cabal file.
 So when you select Package / Open Package from the menu, select the *.cabal
 file of the desired package.
 Leksah shows the currently active package in the third compartment in the
 status bar.
\end_layout

\begin_layout Standard
To start with a new package select Package / NewPackage from the menu.
 Then you have to select a folder for the project, this is by convention
 the same name you will give to your package.
 Then the package editor will open up, in which you have to supply information
 about your package.
 
\end_layout

\begin_layout Subsection
Package Editor
\end_layout

\begin_layout Standard
The package editor (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:PackageEditor-1"

\end_inset

) is an editor for cabal files.
 Since cabal files offer complex options the editor is quite complex.
 For a complete description of all options see the 
\begin_inset CommandInset href
LatexCommand href
name "Cabal User's Guide"
target "http://www.haskell.org/ghc/docs/latest/html/Cabal/index.html"

\end_inset

.
 The package editor does currently not support the cabal configurations
 feature.
 If you need cabal configurations, you need to edit the cabal files as a
 text file.
 Since Leksah uses standard cabal files with no modifications this is no
 problem, and you can use Leksah with such packages with no problem, just
 the package editor will not work for you.
 (We plan to enhance the editor to support configurations in the future).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/PackageEditor2.png
	scale 33

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:PackageEditor-1"

\end_inset

PackageEditor 1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The minimum requirements for any package is to give a name and a version.
 Then you will have to enter dependencies on other packages in the dependencies
 part of the editor.
 This will be at least the 
\emph on
base
\emph default
 package.
\end_layout

\begin_layout Standard
Finally you have to specify an executable or a library that should be the
 result of your coding effort.
 You do this in the Executable and Library part of the editor.
 Cabal gives the possibility to build more then one executable from one
 package and to build a library and executables from one package.
 
\end_layout

\begin_layout Standard
For an executable you enter a name, the source file with the main function
 and a build info.
 For a library you enter the exposed modules and a build info.
\end_layout

\begin_layout Standard
With build information you give additional 
\begin_inset space \space{}
\end_inset

information, e.g: 
\end_layout

\begin_layout Itemize
where the sources can be found (relative to the root folder of the project,
 which is the one with the cabal file).
 
\end_layout

\begin_layout Itemize
what additional non-exposed or non main modules your project includes
\end_layout

\begin_layout Itemize
compiler flags
\end_layout

\begin_layout Itemize
used language extensions in addition to Haskell 98 (These can also be specified
 in the source files with pragmas)
\end_layout

\begin_layout Itemize
and many more ...
\end_layout

\begin_layout Standard
Because more then one executable and a library can be build from one package,
 it is possible to have cabal files with more then one build info.
 The package editor deals with this by the buttons Add / Remove Build Info.
 Every build info gets an index number, and for executables and a library
 you specify the index of the build info.
\end_layout

\begin_layout Subsection
Building
\end_layout

\begin_layout Standard
The most frequently used functionality with packages is to make a build,
 which is possible after a successful configure.
 When you start a build, you can see the standard output of the Cabal build
 procedure in the Log pane.
 
\end_layout

\begin_layout Standard
A build may produce errors and warnings.
 If this is the case the focus is set to the first error/warning in the
 Log and the corresponding source file will open with the focus at the point
 where the compiler reports the error.
 You can navigate to the next or previous errors by clicking on the error
 or warning in the log window, or by using the menu, the toolbar or a keystroke.
\end_layout

\begin_layout Standard
In the statusbar the state regarding to the build is displayed in the third
 compartment from the right.
 It reads 
\emph on
Building
\emph default
 as long as a build is on the way and displays the numbers of errors and
 warnings after a build.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../data/ide_make.png
	width 1cm

\end_inset

This is the symbol, which initiates a 
\noun on
build
\noun default
 when clicked on the toolbar (Ctrl-b).
\end_layout

\begin_layout Standard
The error pane (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Error-Pane"

\end_inset

) shows the errors in the form of a table and provides the same functionality
 you find in the log, but it may be more convenient to use.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/ErrorPane0.6.png
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Error-Pane"

\end_inset

Error Pane
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Background-Build"

\end_inset

Background Build
\end_layout

\begin_layout Standard
Leksah can run builds while you work and highlight errors as it finds them.
 This works with a timer that runs continuously in the background.
 If there are changes made to any open file it \SpecialChar \ldots{}

\end_layout

\begin_layout Itemize
interrupts any running build by sending SIGINT (sadly this step is OSX and
 Linux only at this point)
\end_layout

\begin_layout Itemize
waits for any running build processes to finish
\end_layout

\begin_layout Itemize
saves all the modified files
\end_layout

\begin_layout Itemize
starts a new build
\end_layout

\begin_layout Standard
Because we can't interrupt the build on windows there is an option in the
 Leksah build preferences to have it skip the linking stage in background
 builds.
 This reduces the delay before a next build starts.
 Background build and linking can be configured in the preferences and as
 well switched on and off from the toolbar.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../data/ide_build.png
	width 1cm

\end_inset

This is the symbol, which switches 
\noun on
background build
\noun default
 on or off in the toolbar.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../data/ide_link.png
	width 1cm

\end_inset


\noun on
Linking
\noun default
 with background build
\noun on
 
\noun default
on or off
\noun on
.
\end_layout

\begin_layout Subsection
Build system flags
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/PackageFlags0.6.png
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Package Flags
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you can see in the package menu (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Package-Menu"

\end_inset

) you can do more operations with packages, which are mostly provided by
 the Cabal system.
 You can clean, configure, build and if you have build an executable run
 your program.
 And other operations like building a source distribution and building haddock
 documentation.
 For more details about these operations (as said before) consult the 
\begin_inset CommandInset href
LatexCommand href
name "Cabal User's Guide"
target "http://www.haskell.org/ghc/docs/latest/html/Cabal/index.html"

\end_inset

.
 
\end_layout

\begin_layout Standard
Since many of these operations can take additional flags you can enter these
 by selecting Package / Edit flags.
 Then the Flags pane opens up (Figure 12).
 For example haddock documentation for the leksah source will not be build,
 because it is not a library unless you pass the --executable flag.
 The flags are stored in a file called IDE.flags in the root folder of the
 project.
\end_layout

\begin_layout Standard
If you want to link with the locally installed libraries (ghc-pkg) Haskell
 packages locally, set: config flags --user 
\end_layout

\begin_layout Subsection
Import Helper
\end_layout

\begin_layout Standard
A frequent and annoying error is the 
\noun on
Not in scope
\noun default
 compiler error.
 In the majority of cases it means that an import statement is missing and
 to write import statements is a frequent and annoying task.
 In Leksah if you need to add an import, you can choose 
\emph on
Add import 
\emph default
from the context menu in the log pane.
 Leksah will then add an import statement to the import list.
 If their is more then one module that exports this identifier, a dialog
 will appear which queries you about the module you want to import from
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Import-dialog"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/SelectModule.png
	display false
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Import-dialog"

\end_inset

Import dialog
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Leksah then adds a line or an entry to the import list of the affected module
 with the compiler error.
 It adds as well an entry in the lop pane.
 Leksah imports individual elements, but imports all elements of a class
 or data structure if one of them is needed.
 The import helper can work with qualified identifiers and will add a correct
 import statement.
 You can as well select 
\emph on
add all imports
\emph default
 from the context menu, in which case all 
\emph on
Not in scope 
\emph default
errors
\emph on
 
\emph default
will be treated sequentially.
 
\end_layout

\begin_layout Standard
\begin_inset Box Framed
position "t"
hor_pos "c"
has_inner_box 0
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
When Leksah does not find an identifier update the Leksah database.
 
\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../data/ide_rebuild_meta.png
	width 1cm

\end_inset


\noun on
Update Metadata
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The import helper just looks in imported packages, so if you miss a package
 import, you have to fix it manually.
 
\end_layout

\begin_layout Standard
Obviously some not in scope errors have other reasons, e.g.
 you have misspelled some identifier, which can't be resolved by adding
 imports.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Module Browser and Metadata
\end_layout

\begin_layout Standard
\begin_inset Wrap table
lines 0
placement o
overhang 0in
width "30col%"
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sort
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
symbol
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../data/ide_function.png
	width 0.5cm

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
data
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../data/ide_data.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

constructor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../data/ide_konstructor.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

slot
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../data/ide_slot.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
type 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../data/ide_type.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
newtype
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../data/ide_newtype.png
	width 0.5cm

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../data/ide_class.png
	width 0.5cm

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

member 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../data/ide_method.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
instance
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../data/ide_instance.png
	width 0.5cm

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../data/ide_rule.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sorts of identifiers
\end_layout

\end_inset


\end_layout

\end_inset

Leksah collects data about the exported modules of all installed Haskell
 packages on your system.
 It does this by reading the Haskell interface files (from GHC).
 In addition it adds source positions and comments of packages, for which
 a cabal file with the corresponding source files can be found.
 The package you work on is treated differently, as not only external exported
 entities are collected, but all exports from all modules are collected.
 This makes it possible to get information about identifiers: 
\end_layout

\begin_layout Itemize
Which packages and modules export this identifier?
\end_layout

\begin_layout Itemize
What is the sort of the exported identifier?
\end_layout

\begin_layout Standard
If the source was found: 
\end_layout

\begin_layout Itemize
What is the comment for this identifier?
\end_layout

\begin_layout Itemize
Where is the source with position?
\end_layout

\begin_layout Standard
If you like to get information about some identifier in the code, the easiest
 way is to press 
\noun on
Ctrl and double click
\noun default
 on it.
\end_layout

\begin_layout Standard
More precisely the operation is not triggered by the double click operation,
 but by the release of the left button.
 So if the double click does not select the right area for a special id
 like ++, you can select the desired characters with the left button and
 then release it while you hold down the Ctrl key.
 If the id is known unambiguously the modules and info pane will show informatio
n about it.
 If more then one possibility exist the search pane will open and present
 the alternatives.
\end_layout

\begin_layout Standard
The current Leksah metadata does not contain definitions local to a module.
 So names which are not exported will not be found in the metadata.
 We plan to change this for the current project for future versions.
 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
We started with the 
\begin_inset Quotes eld
\end_inset

global
\begin_inset Quotes erd
\end_inset

 approach from the intuition, that it takes most of our time to find something
 that is not already imported and 
\begin_inset Quotes eld
\end_inset

known
\begin_inset Quotes erd
\end_inset

.
 A local definition can be easily find by a text search.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can see the sort of expression by the icon before the identifier.
 The following sorts of identifiers are currently known in the Metadata:
\end_layout

\begin_layout Subsection
The Modules Pane
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/ModulesPane0.6.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Modules-pane"

\end_inset

Modules pane
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the modules pane (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Modules-pane"

\end_inset

) you get information about modules and their interface.
 The displayed information depends on the open package.
 If no package is open only the system scope has information.
 (If a package is open, it's name is displayed in the third subdivision
 from the left of the status bar.)
\end_layout

\begin_layout Standard
We assume there is an open package.
 You can then select the scope of the displayed information with the radio
 button on top of the modules pane.
 The 
\emph on
Local
\emph default
 scope shows only modules which are part of the current project.
 The 
\emph on
Package
\emph default
 scope shows all modules of the package and all packages which the current
 package depends on.
 The 
\emph on
System
\emph default
 scope shows all modules of installed packages of the system.
 (You can get the list of all installed packages with 
\emph on
ghc-pkg
\emph default
 list.
 Leksah scans the user and the system package database, when both are present).
\end_layout

\begin_layout Standard
If the Blacklist toggle button is selected, the packages in the blacklist
 are not displayed.
 The information is accessible, but the modules are excluded from the modules
 browser.
 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
I invented the blacklist mainly for the GHC package, when will they use
 hierarchical module names?
\end_layout

\end_inset

.
 The Blacklist can be edited in the preferences pane.
\end_layout

\begin_layout Standard
If you select a module in the modules list, its interface is displa
\begin_inset Newline newline
\end_inset

yed in the interface list on the right.
 You can search for a module or package by selecting the modules list and
 typing some text.
 With the up and down arrows you find the next/previous matching item.
 With the escape key or by selecting any other GUI element you leave the
 search mode.
 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../data/ide_source.png
	width 1cm

\end_inset

If this icon shows up, Leksah has found a 
\noun on
source
\noun default
 file or source position for this element.
 You can open the source file, or bring it to the front and display the
 source for the selected location with a 
\emph on
double click
\emph default
 on the element.
 (the same can be done with selecting 
\emph on
Go to definition
\emph default
 from the context menu.
 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../data/ide_reexported.png
	width 1cm

\end_inset

This is 
\noun on
reexported
\noun default
 from another module.
\end_layout

\begin_layout Standard
By selecting an element in the Interface List the so called Info Pane is
 shown with additional information.
\end_layout

\begin_layout Standard
The quickest way to edit some project file is to go to the modules pane,
 select local scope and find the module by entering text, and double click
 for editing the file.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/ConstructModule.png
	scale 37

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Construct-module-dialog"

\end_inset

Construct module dialog
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The easiest way to add a new module is by selecting 
\emph on
Add module
\emph default
 from the context menu of the modules pane.
 The Construct Module dialog will open (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Construct-module-dialog"

\end_inset

).
 You have to enter the name of the module, the source path to use if alternative
s exist and, when the project is a library, if the module is exposed.
 Leksah will construct the directory, modify the cabal file and construct
 an empty module file from a template.
 
\end_layout

\begin_layout Standard
The modification of the cabal file will currently only happen, if it does
 not contain configurations.
\end_layout

\begin_layout Subsection
The Info Pane
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/InfoPane2.png
	scale 37

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Info-pane"

\end_inset

Info pane
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

The Info Pane (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Info-pane"

\end_inset

) shows information about an interface element, which may be a function,
 a class, a data definition, a type \SpecialChar \ldots{}
.
 It shows the identifier, the package and module that it is exported by,
 it's Haskell type and if found a comment.
 
\end_layout

\begin_layout Standard
If you select initiate an identifier search in an editor, and information
 about this identifier is available in the package scope, it is automatically
 displayed in the info pane.
 Again, the easiest way to do this is to double click on an identifier while
 pressing Ctrl.
 
\end_layout

\begin_layout Standard
Remember that only statically collected information is available this way,
 and only about items which are exported by some module.
\end_layout

\begin_layout Standard
If a source location is attached, you can go to the definition by clicking
 the 
\emph on
Source
\emph default
 button.
 
\end_layout

\begin_layout Standard
You can select the module and the interface element in the modules pane
 by clicking the 
\emph on
Modules
\emph default
 button.
\end_layout

\begin_layout Standard
With the 
\emph on
Refs
\emph default
 button a pane opens which displays modules which uses this element.
\end_layout

\begin_layout Standard
With the 
\emph on
Docu
\emph default
 button you can initiate an external search in a browser with e.g.
 hayoo or Hoogle, depending on the configuration in the Preferences.
\end_layout

\begin_layout Standard
With the 
\emph on
Search
\emph default
 button you can initiate a metadata search for the identifier.
\end_layout

\begin_layout Subsection
The Search Pane
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/SearchPane0.6.png
	scale 37

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Search-pane"

\end_inset

Search pane
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can search for an identifier in the metadata by typing in characters
 in the entry at the bottom of the pane.
 The search result depends on the settings in the search pane (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Search-pane"

\end_inset

).
 You can choose:
\end_layout

\begin_layout Enumerate
The scope in which to search, which can be local, package or system.
\end_layout

\begin_layout Enumerate
The way the search is executed, which can be exact, prefix or as a regular
 expression.
\end_layout

\begin_layout Enumerate
You can choose if the search shall be case sensitive or not.
\end_layout

\begin_layout Standard
The result of the search is displayed in the list part of the Search pane.
 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
You can see if the module reexports the identifier, or if the source of
 the identifier is reachable.
 When you single click on a search result, the info pane shows the corresponding
 information.
 If you double click on an entry, the modules and info pane shows the correspond
ing information.
\end_layout

\begin_layout Standard
If you double click on an identifier and press Ctrl in a source buffer,
 it is a case sensitive and exact search in the package scope.
 It does not depend on the selection in the search pane.
 
\end_layout

\begin_layout Subsection
The References Pane
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/ReferencesPane0.6.png
	scale 37

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
References Pane
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As said in the end of the last section, this pane shows which modules uses
 a certain element.
 The element is displayed in the top, and the modules which import it are
 displayed in the list box.
 If you double click on an entry in the list box, the corresponding source
 will be opened if possible.
 Then a text search on the selected element is initiated.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Metadata-collection"

\end_inset

Metadata collection
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 0in
width "30col%"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/MetadataMenu0.6.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Metadata-menu"

\end_inset

Metadata menu
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Metadata collection depends on the configuration and can be manually triggered.
\end_layout

\begin_layout Standard
If you select Metadata / Update Project the metadata for the current project
 is collected from the .hi files and the source files.
 You should select this if the metadata of the current project is out of
 sync.
\end_layout

\begin_layout Standard
If you select Metadata / Update Lib Leksah checks if a new library has installed
 and if this is the case collects metadata for it.
\end_layout

\begin_layout Standard
In the Metadata part of the preferences (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Metadata-Preferences"

\end_inset

) you can edit the settings concerning metadata collection.
 
\end_layout

\begin_layout Standard
Metadata collection is a difficult point, because it depends on the installation
, environment, the installed packages, etc.
 However, to make good use of leksah it is highly desirable to have metadata
 with sources available for the packages you really need.
 So here we explain how metadata collection works:
\end_layout

\begin_layout Enumerate
Since cabal install has sources only as compressed tar archives on your
 machine, leksah needs to unpack this.
 You can see if this works by browsing the folders.
 You can initiate this step by calling leksah -x - n.
 If only root has write access to some cabal packages do a: sudo leksah
 -x -n (--Extract --NoGui).
 
\end_layout

\begin_layout Enumerate
Now leksah looks for all cabal files it can find below the source folders.
 From this information the file source_packages.txt in the .leksah folder
 is written.
 If you miss sources for a package in Leksah, consult this file if the source
 place of the package has been correctly found.
 You can run this step by: leksah -s -n (--Sources --NoGui).
\end_layout

\begin_layout Enumerate
The metadata collection itself proceeds in two steps: A) Extract info from
 .hi files, which is usually no problem.
 B) Add source locations and comments by parsing the sources.
 This can be a problem because of preprocessing, header files, language
 extensions, etc.
 The result is stored in a folder under the .leksah folder (under your home
 folder).
 The folder will be named after the compiler version (e.g.
 ghc-6.8.1).
 In this folder for every package a metadata file is stored (e.g.
 binary-0.4.1.pack).
 These files are in binary format.
 
\begin_inset Newline newline
\end_inset

You can rebuild the whole metadata when you start Leksah with the -r -n
 option (--Rebuild --NoGui).
\begin_inset Newline newline
\end_inset

You can update the metadata with: leksah -c -n (--Collect --NoGui)
\begin_inset Newline newline
\end_inset

If you have a problem with a certain package, remove its metadata file ,
 e.g.
 rm ~/.leksah/ghc-.../binary*.
 And then do a collect: leksah -c -n.
 Look for error messages in the Console to see if some problem is reported.
\end_layout

\begin_layout Enumerate
For the current package a slightly different procedure is used, because
 leksah not only looks for exported library entities, but for all exports
 of every module.
 The written metadata file has the extension .packw.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/MetadataPrefs0.6.png
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Metadata-Preferences"

\end_inset

Metadata Preferences
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Debugger
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 0in
width "30col%"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/DebugMenu0.6.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/BufferMenu0.6.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Debug & Buffer menu
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can switch Debugger mode on from the toolbar:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../data/ide_debug.png
	width 1cm

\end_inset

Switch debugger Mode on or off.
\end_layout

\begin_layout Standard
After switching debugger mode on, you can see that packages and modules
 for your current project are loaded into GHCi.
\end_layout

\begin_layout Standard
When debugger mode is on, you see that the menu entries from the Debug menu
 are no longer disabled, and the context menu of source buffers have entries
 enabled as well, that were disabled when not in debugger mode.
 
\end_layout

\begin_layout Standard
You can open the debugger group pane by choosing Debug / Show Debugger.
 
\end_layout

\begin_layout Standard
You can now:
\end_layout

\begin_layout Itemize

\noun on
Evaluate
\noun default
 expressions in the interpreter and observe the result.
\begin_inset Newline newline
\end_inset

Select the expression in a source buffer.
 Select eval from the context menu.
 The result of the evaluation is shown in the log window and as 
\emph on
it 
\emph default
in the variables pane.
\begin_inset Newline newline
\end_inset

The debugger has a pane which is for writing down evaluation expressions.
 The pane is a Haskell source buffer, which has the reserved name _Eval.
 Its contents is saved with the session.
\begin_inset Newline newline
\end_inset

Choose 
\begin_inset Quotes eld
\end_inset

Eval & Insert
\begin_inset Quotes erd
\end_inset

, to insert a string representation of the result after the selected expression.
\end_layout

\begin_layout Itemize
Determine the 
\noun on
type
\noun default
 of an expression: Select the expression in a source buffer.
 Select Type from the context menu.
\end_layout

\begin_layout Itemize
Get
\noun on
 info
\noun default
 about an identifier: Select Info from the context menu.
\end_layout

\begin_layout Itemize
Get 
\noun on
the kind
\noun default
 of a type.: Select Kind
\end_layout

\begin_layout Itemize

\noun on
Step
\noun default
 through code: Select the expression in a source buffer.
 Select step from the context menu.
\end_layout

\begin_layout Itemize
or 
\noun on
Step
\noun default
 through code: Set 
\noun on
breakpoints
\noun default
 by putting the cursor at the breakpoint and select 
\emph on
set breakpoint 
\emph default
from the context menu.
 Run your application or testcases and start stepping at the breakpoint.
 
\end_layout

\begin_layout Itemize

\series bold
\color red
Attention:
\series default
\color inherit
 If you select a text, the breakpoint will be set for the implementation
 of this identifier
\end_layout

\begin_layout Itemize
You can observe the current breakpoints in the breakpoints pane.
 You can remove breakpoints from this pane.
\end_layout

\begin_layout Itemize
Use the toolbar (or shortcuts) for stepping:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../data/ide_step.png
	width 1cm

\end_inset

Step (F6), 
\begin_inset Graphics
	filename ../data/ide_local.png
	width 1cm

\end_inset

Step local (F7)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../data/ide_module.png
	width 1cm

\end_inset

Step in module (F8), 
\begin_inset Graphics
	filename ../data/ide_continue.png
	width 1cm

\end_inset

Continue (F9)
\end_layout

\begin_layout Itemize
While stepping through code, you can observe 
\noun on
variables
\noun default
 in the variables pane.
 You can print or force a variable from the context menu of the variables
 pane.
 You can update the pane from the context menu.
\end_layout

\begin_layout Itemize
You can observe an execution trace in the traces pane.
 Navigation in the traces pane is currently not supported (:back, :forward).
\end_layout

\begin_layout Itemize
You can query information about the current state of GHCi from the Debugger
 menu.
 E.g.
 
\emph on
Show loaded modules
\emph default
, 
\emph on
Show packages
\emph default
 and 
\emph on
Show languages
\emph default
.
 
\end_layout

\begin_layout Itemize
You can directly communicate with GHCi by evaluating commands.
 E.g.
 
\begin_inset Quotes eld
\end_inset

:set ...
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
For further information about the GHCi debugger, please read the section
 2.5.
 (The GHCi Debugger) of the GHC user manual.
 
\end_layout

\begin_layout Standard
The Debugger is the newest addition to Leksah and is still in an experimental
 stage.
 So please do not expect to much in the moment.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/DebugPane0.6.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Debug Pane
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Configuration
\end_layout

\begin_layout Standard
Leksah is highly customizable.
 Here it is explained how this works.
\end_layout

\begin_layout Subsection
Layout
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 0in
width "30col%"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/ViewMenu.png
	lyxscale 50
	scale 47

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
View menu
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In Leksah there may be an active pane.
 The name of this pane is displayed in the second compartment from the left
 side in the status bar.
 Some actions like moving, splitting, closing panes or finding or replacing
 items in a text buffer act on the current pane, so check the display in
 the status bar to see if the pane you want to act on, is really the active
 one.
\end_layout

\begin_layout Standard
The layout of the Leksah window contains areas which contain notebooks which
 contain so called panes.
 The division between the two areas is adjustable by the user by dragging
 a handle.
 The areas form a binary tree, although this tree is not visible to the
 user.
 Every area can be split horizontally or vertically.
 Panes can collapsed, the effect of collapsing depends on the position of
 the pane in the binary layout tree.
\end_layout

\begin_layout Standard
Panes can be moved between areas in the window.
 This can be done by dragging the notebook tab, and release it on the frame
 of another notebook.
 Alternatively you can use keystrokes (Shift Alt Arrow) to move panes around.
 
\end_layout

\begin_layout Standard
The tabs of notebooks can be positioned at any of the four directions, or
 the tabs can be switched off.
 Note that holding the mouse over the tabs and selecting the right button
 brings up a menu of all panes in this area, so that you can for example
 quickly select one of many open source buffers.
\end_layout

\begin_layout Standard
The layout will be saved with sessions.
 The session mechanism will be explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Session-handling"

\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
 Currently there is no way to load different layouts independent of the
 other data stored in a sessions.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the initial pane positions part of the Preferences, you can configure
 the placement of panes.
 Panes belongs to categories, and a category specify a path were a pane
 will open (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Initial-pane-position"

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/PanePosPrefs0.6.png
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Initial-pane-position"

\end_inset

Initial pane position
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Group panes
\end_layout

\begin_layout Standard
Before we invented group panes, a notebook could only contain atomar panes.
 Now it can as well contain group panes, which have a layout on their own
 and may contain arbitary other panes.
 The debug pane is an example for a group pane.
 This gives you the possibility to arrange the subpanes in a debugger pane
 as it fits best for you.
 
\end_layout

\begin_layout Standard
You can add a new group by selecting View / Group from the menubar.
 You have to give a unique name for any group.
 Then you can arrange panes in the group as you like.
 When closing a group, and the group is not empty, you have to confirm that
 this is what you really want.
\end_layout

\begin_layout Subsubsection
Detached windows
\end_layout

\begin_layout Standard
This feature is useful if you want to use Leksah on multiple screens.
 You can select a notebook and choose View / Detach from the menubar.
 Then this notebook is opened in a new window, which you can then move to
 another screen.
 
\end_layout

\begin_layout Standard
If you close the detached window, the contents goes back to the place where
 it was before detaching.
\end_layout

\begin_layout Standard
When you close Leksah, the state of detached window is remembered, and they
 will be reopened when you restart Leksah.
\end_layout

\begin_layout Standard
It is possible to drag and drop panes between windows.
 But splitting and collapsing of panes is disabled for detached windows.
 So a recommended way to use this feature is to split a pane, arrange the
 panes that you want to detach in the area of the new notebook.
 Select the new notebook and detach.
\end_layout

\begin_layout Standard
The detached windows have no menubar, toolbar and statusbar on their own.
 This may be a problem, because when you want to select a menu entry, the
 focus may change from a pane in the detached window to a pane in the main
 window, and you may not be able to do what you want.
 However keystrokes works fine, and that is how we use this feature.
\end_layout

\begin_layout Standard
This is a new addition in this release, and the handling of detachement
 may be a bit unconveniant.
 Let us know what you need.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Session-handling"

\end_inset

Session handling
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 0in
width "30col%"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshots/SessionMenu.png
	lyxscale 50
	scale 47

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Session menu
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When you close Leksah the current state is saved in the file Current.session
 in the ~/.leksah folder.
 A session contains the layout of the window, its population, the active
 package and some other state.
 When you restart Leksah it recovers the state from this information.
 When you close a package, the session is saved in the project folder in
 the file IDE.session.
 When you open a project and Leksah finds a IDE.session file in the folder
 of the project you are going to open, you get prompted if you want to open
 this session.
 This should help you to switch between different packages you are working
 on.
\end_layout

\begin_layout Standard
Beside of this you have the possibility to store and load named sessions
 manually by using the session menu.
 Actually you may live well without using this feature.
 
\end_layout

\begin_layout Standard
You can as well choose to mark Forget Session, if you don't want the current
 session to be stored.
 This can be useful, if something goes wrong (e.g.
 you hit accidentally Ctrl - 0 and the layout collapses completely).
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Shortcuts"

\end_inset

Shortcuts
\end_layout

\begin_layout Standard
You can configure the keystrokes by providing a .keymap file, which can either
 be in the .leksah folder or in the data folder.
 The name of the key map file to be used can be specified in the Preferences
 dialog.
 A line in the .keymap file looks like:
\end_layout

\begin_layout Standard
<ctrl>o -> FileOpen "Opens an existing file"
\end_layout

\begin_layout Standard
Allowed Modifiers are <shift> <ctrl> <alt> <apple> <compose>.
 <apple> is the Windows key on PC keyboards.
 <compose> is often labeled Alt Gr.
 It is as well possible to specify Emacs like keystrokes in the following
 way:
\end_layout

\begin_layout Standard
<ctrl>x/<ctrl>f -> FileOpen "Opens an existing file"
\end_layout

\begin_layout Standard
The comment on the right will be displayed as tool tips on top of toolbar
 buttons, if such exist for this action.
 
\end_layout

\begin_layout Standard
The name of the action can be any one of the 
\emph on
ActionDescr's
\emph default
 given in the 
\emph on
action
\emph default
 function in the Module 
\emph on
IDE.Menu
\emph default
.
 
\end_layout

\begin_layout Standard
Whenever you call an action, by a menu, a toolbar or a keystroke, the keystroke
 with its associated ActionsString is displayed in the Status bar in the
 leftmost compartment.
 
\end_layout

\begin_layout Standard
Every keystroke shall obviously only be associated with one action, and
 more important every action may only have one associated keystroke.
\end_layout

\begin_layout Standard
Simple keystrokes are shown in the menu, but Emacs like keystrokes are not.
 This is because simple keystrokes are delegated to the standard GTK mechanism,
 while other keystrokes are handled by Leksah.
\end_layout

\begin_layout Subsection
Configuration files
\end_layout

\begin_layout Standard
Leksah stores its configuration in a directory called ~/.leksah under your
 home folder.
 
\end_layout

\begin_layout Standard
The file Default.prefs stores the general Preferences.
 These Preferences can be edited in a dialog by choosing Configuration /
 Edit Prefs from the menu.
 If this file is not available the Default.prefs file from the installed
 /data folder will be used.
\end_layout

\begin_layout Standard
The Current.session file stores the state of the last session, so that Leksah
 will recover the state from the last session.
 If this file is not available it will be taken from the installed /data
 folder.
\end_layout

\begin_layout Standard
The source_packages.txt file stores source locations for installed packages.
 It can be rebuild by calling Leksah with the -s or --Sources argument .
 Do this after you moved your source or added sources for previous installed
 packages without sources.
 
\end_layout

\begin_layout Standard
The folder will contain one or many other folders (e.g.
 ghc-6.8.1).
 In this folder collected information about installed packages for a compiler
 version is stored.
 (e.g.
 binary-0.4.1.pack).
 These files are in binary format.
 If you start Leksah with the -r or --Rebuild argument, it cleans all .pack
 files and rebuilds everything.
\end_layout

\begin_layout Standard
Files for Keymaps and SourceCandy may be stored in the ~/.leksah folder and
 will be found according to the name selected in the Preferences Dialog.
 Leksah first searches in this folder and after this in the /data folder.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
The Project
\end_layout

\begin_layout Standard
The development of an IDE is a big issue, so Leksah is intended to become
 more and more a community project.
 If you are a user or just test Leksah, we would appreciate to here from
 you.
 Everyone is invited to contribute.
 That can be development, supplying error reports, spreading the word, providing
 keymap and candy files, providing a tutorial, caring for a platform \SpecialChar \ldots{}

\end_layout

\begin_layout Standard
Possible extension and enhancements are:
\end_layout

\begin_layout Itemize
Workspaces
\end_layout

\begin_layout Itemize
Package Editor with configurations
\end_layout

\begin_layout Itemize
Context enriched completion
\end_layout

\begin_layout Itemize
Object browser
\end_layout

\begin_layout Itemize
Extension support with plugins by libraries
\end_layout

\begin_layout Itemize
Add traces to Debugger
\end_layout

\begin_layout Itemize
Collect local metadata for the projects worked on
\end_layout

\begin_layout Itemize
Version Control (Darcs, ...)
\end_layout

\begin_layout Itemize
Testing (Quick check,...)
\end_layout

\begin_layout Itemize
Coverage (HPC,...)
\end_layout

\begin_layout Itemize
Profiling (Ghc Profiler,...)
\end_layout

\begin_layout Itemize
Refactoring (HaRe,...)
\end_layout

\begin_layout Itemize
FAD (Functional Analysis and Design,...)
\end_layout

\begin_layout Itemize
\SpecialChar \ldots{}

\end_layout

\begin_layout Standard
Acknowledgment 
\end_layout

\begin_layout Standard
Thanks to Ricardo Herrmann for making the new Leksah logo.
 
\end_layout

\begin_layout Standard
Thanks to Sean Chapel for help with Ubuntu installation instructions.
\end_layout

\begin_layout Standard
Thanks to Wolfgang Jeltsch for being our most helpful user.
\end_layout

\begin_layout Standard
Thanks to Fabian Emmes, who created the very nice icons for the module browser.
 
\end_layout

\begin_layout Standard
Thanks to Funa which gave its sheer existence for Leksah
\end_layout

\begin_layout Standard
And thanks to the constructors of Haskell, Miranda and GHC.
\end_layout

\begin_layout Standard
Thanks to Moses SchÃ¶nfinkel and Alonzo Church
\end_layout

\begin_layout Standard
and to the four cardinal points
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Appendix
\end_layout

\begin_layout Subsection
Command line arguments
\end_layout

\begin_layout LyX-Code
Usage: ide [OPTION...] files...
   
\end_layout

\begin_layout LyX-Code
-r        --Rebuild           Cleans all .pack files and rebuild everything
   
\end_layout

\begin_layout LyX-Code
-c        --Collect           Collects new information in .pack files   
\end_layout

\begin_layout LyX-Code
-u FILE   --Uninstalled=FILE  Gather info about an uninstalled package 
  
\end_layout

\begin_layout LyX-Code
-s        --Sources           Gather info about pathes to sources   
\end_layout

\begin_layout LyX-Code
-v        --Version           Show the version number of ide   
\end_layout

\begin_layout LyX-Code
-d        --Debug             Write ascii pack files   
\end_layout

\begin_layout LyX-Code
-l NAME   --LoadSession=NAME  Load session   
\end_layout

\begin_layout LyX-Code
-n        --NoGUI             Don't start the leksah GUI   
\end_layout

\begin_layout LyX-Code
-x[FILE]  --Extract[=FILE]    Extract tars from cabal install directory
   
\end_layout

\begin_layout LyX-Code
-h        --Help              Display command line options 
\end_layout

\begin_layout Subsection
The Candy file
\end_layout

\begin_layout LyX-Code
-- Candy file
\end_layout

\begin_layout LyX-Code
"->" 0x2192 Trimming --RIGHTWARDS ARROW
\end_layout

\begin_layout LyX-Code
"<-" 0x2190 Trimming --LEFTWARDS ARROW
\end_layout

\begin_layout LyX-Code
"=>" 0x21d2 --RIGHTWARDS DOUBLE ARROW
\end_layout

\begin_layout LyX-Code
">=" 0x2265 --GREATER-THAN OR EQUAL TO
\end_layout

\begin_layout LyX-Code
"<=" 0x2264 --LESS-THAN OR EQUAL TO
\end_layout

\begin_layout LyX-Code
"/=" 0x2260 --NOT EQUAL TO
\end_layout

\begin_layout LyX-Code
"&&" 0x2227 --LOGICAL AND
\end_layout

\begin_layout LyX-Code
"||" 0x2228 --LOGICAL OR
\end_layout

\begin_layout LyX-Code
"++" 0x2295 --CIRCLED PLUS
\end_layout

\begin_layout LyX-Code
--"::" 0x2551 Trimming --BAR
\end_layout

\begin_layout LyX-Code
"::" 0x2237 Trimming --PROPORTION
\end_layout

\begin_layout LyX-Code
".." 0x2025 --TWO DOT LEADER
\end_layout

\begin_layout LyX-Code
"^" 0x2191 --UPWARDS ARROW
\end_layout

\begin_layout LyX-Code
"==" 0x2261 --IDENTICAL TO
\end_layout

\begin_layout LyX-Code
" .
 " 0x2218 --RING OPERATOR
\end_layout

\begin_layout LyX-Code
"
\backslash
" 0x03bb --GREEK SMALL LETTER LAMBDA
\end_layout

\begin_layout LyX-Code
--"=<<" 0x291e --
\end_layout

\begin_layout LyX-Code
">>=" 0x21a0
\end_layout

\begin_layout LyX-Code
"$" 0x25ca
\end_layout

\begin_layout LyX-Code
">>" 0x226b -- MUCH GREATER THEN
\end_layout

\begin_layout LyX-Code
"forall" 0x2200 --FOR ALL
\end_layout

\begin_layout LyX-Code
"exist" 0x2203 --THERE EXISTS
\end_layout

\begin_layout LyX-Code
"not" 0x00ac --NOT SIGN
\end_layout

\begin_layout LyX-Code
"alpha" 0x03b1
\end_layout

\begin_layout LyX-Code
"beta" 0x03b2
\end_layout

\begin_layout LyX-Code
"gamma" 0x03b3
\end_layout

\begin_layout LyX-Code
"delta" 0x03b4
\end_layout

\begin_layout LyX-Code
"epsilon" 0x03b5
\end_layout

\begin_layout Subsection
The Keymap file
\end_layout

\begin_layout LyX-Code

\size scriptsize
-- Default Keymap file for Leksah --Allowed Modifiers are <shift>	
\end_layout

\begin_layout LyX-Code

\size scriptsize
-- <ctrl> <alt> <apple> <compose> --<apple> is the Windows key 
\end_layout

\begin_layout LyX-Code

\size scriptsize
-- on PC keyboards --<compose> is often labelled Alt Gr.
 
\end_layout

\begin_layout LyX-Code

\size scriptsize
-- The defined values for the keys can can be found at 
\end_layout

\begin_layout LyX-Code

\size scriptsize
-- http://gitweb.freedesktop.org/?p=xorg/proto/x11proto.git;a=blob_plain;f=keysymde
f.h.
 
\end_layout

\begin_layout LyX-Code

\size scriptsize
-- The names of the keys are the names of the macros without the prefix.
\end_layout

\begin_layout LyX-Code

\size scriptsize
-- File 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>n                    ->          FileNew         "Opens a new empty
 buffer" 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>o                    ->          FileOpen        "Opens an existing
 file" 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>s                    ->          FileSave        "Saves the current
 buffer" 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl><shift>s             ->          FileSaveAll     "Saves all modified
 buffers"
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>w                    ->          FileClose       "Closes the current
 buffer" 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<alt>F4                    ->          Quit            "Quits this program"
 
\end_layout

\begin_layout LyX-Code

\size scriptsize
--Edit <ctrl>z             ->          EditUndo        "Undos the last user
 action" 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<shift><ctrl>y             ->          EditRedo        "Redos the last user
 action" 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>a                    ->          EditSelectAll   "Select the whole
 text in the current buffer"
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>f                    ->          EditFind         "Search for a text
 string (Toggles the " 
\end_layout

\begin_layout LyX-Code

\size scriptsize
F3                         ->          EditFindNext     "Find the next occurence
 of the text string"
\end_layout

\begin_layout LyX-Code

\size scriptsize
<shift>F3                  ->          EditFindPrevious "Find the previous
 occurence of the text string"
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>l                    ->          EditGotoLine    "Go to line with
 a known index"
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl><alt>Right           ->          EditComment     "Add a line style
 comment to the selected lines"
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl><alt>Left            ->          EditUncomment   "Remove a line style
 comment" 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<alt><shift>Left           ->          ViewMoveLeft    "Move the current
 pane left" 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<alt><shift>Right          ->          ViewMoveRight   "Move the current
 pane right" 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<alt><shift>Up             ->          ViewMoveUp      "Move the current
 pane up" 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<alt><shift>Down           ->          ViewMoveDown    "Move the current
 pane down"
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>2                    ->          ViewSplitHorizontal "Split the current
 horizontal" 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>3                    ->          ViewSplitVertical "Split the current
 vertical" 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>1                 ->          ViewCollapse    "Collapse the panes"
\end_layout

\begin_layout LyX-Code

\size scriptsize
                        ->          ViewTabsLeft    "Shows the tabs  on
 the left"
\end_layout

\begin_layout LyX-Code

\size scriptsize
                        ->          ViewTabsRight   "Shows the tabs on the
 right"                                                 ->          ViewTabsUp
      "Shows the tabs of the on the top"
\end_layout

\begin_layout LyX-Code

\size scriptsize
                        ->          ViewTabsDown    "Shows the tabs on the
 bottom"      
\end_layout

\begin_layout LyX-Code

\size scriptsize
                        ->          ViewSwitchTabs  "Switches tabs visible
 or invisible " 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>t                 ->          ToggleToolbar                      
   
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>b                 ->          BuildPackage 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>r                 ->          AddAllImports
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl><alt>r            ->          RunPackage
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>j                 ->          NextError 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl><shift>j          ->          PreviousError
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>m                 ->          ShowModules
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>i                 ->          ShowInfo
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl><shift>e          ->          EditAlignEqual 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl><shift>l          ->          EditAlignLeftArrow 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl><shift>r          ->          EditAlignRightArrow 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl><shift>t          ->          EditAlignTypeSig
\end_layout

\begin_layout LyX-Code

\size scriptsize
<alt>i                  ->          AddOneImport 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<alt><shift>i           ->          AddAllImports
\end_layout

\begin_layout LyX-Code

\size scriptsize
-- "For the next to entries the <ctrl> modifier is mandatory" 
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>Page_Up           ->          FlipUp          "Switch to next buffer
 in reverse recently used oder"
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>Page_Down         ->          FlipDown        "Switch to next buffer
 in recently used oder"
\end_layout

\begin_layout LyX-Code

\size scriptsize
<ctrl>space             ->          StartComplete   "Initiate complete in
 a source buffer"
\end_layout

\begin_layout LyX-Code

\size scriptsize
F6 -> DebugStep 
\end_layout

\begin_layout LyX-Code

\size scriptsize
F7 -> DebugStepLocal 
\end_layout

\begin_layout LyX-Code

\size scriptsize
F8 -> DebugStepModule 
\end_layout

\begin_layout LyX-Code

\size scriptsize
F9 -> DebugContinue
\end_layout

\begin_layout LyX-Code

\end_layout

\end_body
\end_document
